# ==================== Basic ====================
snippet async_snippet
abbr (async () => )();
  (async () => {
    ${0:TARGET}
  })();

snippet classMethod
abbr class method
alias method
  ${1:#:methodName} (${2:#:args}) {
    ${0:TARGET}
  }

snippet exportFrom
abbr export {...} from "..."
alias export
  export { ${1:#:member} } from "${0:TARGET}";


# ==================== Method ====================
snippet bind
abbr this.[method] = this.[method].bind(this);
  this.${0:method} = this.$0.bind(this);


# ==================== React ====================
snippet class_React
abbr class extends React.Component
alias class
  class ${1:className} extends React.Component {
    constructor (props) {
      super(props);
    }
  }

snippet export_class_React
abbr export class extends React.Component
alias class
  export class ${1:className} extends React.Component {
    constructor (props) {
      super(props);
    }

    render () {
      return (
        ${0:TARGET}
      );
    }
  }

snippet render_React
abbr React class render method
  render () {
    return (
      ${0:TARGET}
    );
  }

snippet shouldComponentUpdate
  shouldComponentUpdate (nextProps, nextState) {
    ${0:TARGET}
  }

snippet componentDidUpdate
  componentDidUpdate (prevProps, prevState, snapshot) {
    ${0:TARGET}
  }

snippet getDerivedStateFromProps
  static getDerivedStateFromProps (nextProps, prevState) {
    ${0:TARGET}
  }

# ==================== Extras ====================
snippet separator
abbr /* ----- this is ----- */
  /* -------------------- ${0:TARGET} -------------------- */


snippet doc_function
abbr /* @doc_comment */
  /**
   * ${1:description}
   * @param {${2:string param_type}} ${3:name param_name}
   * @return {${4:type return_type}}
   */

