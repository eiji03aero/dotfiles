# ==================== Basic ====================
snippet async-snippet
abbr (async () => )();
  (async () => {
    ${0:TARGET}
  })();

snippet classMethod
abbr class method
alias method
  ${1:#:methodName} (${2:#:args}) {
    ${0:TARGET}
  }

snippet export-from
abbr export { member } from './path'
  export { ${1:member} } from '${0:TARGET}';

snippet const{
abbr const { } = property;
  const { ${1} } = ${0:TARGET};

snippet const{n
abbr const { nl } = property;
  const {
    ${1}
  } = ${0:TARGET};

# ==================== Method ====================
snippet bind
abbr this.[method] = this.[method].bind(this);
  this.${0:method} = this.$0.bind(this);

# ==================== imports ====================
snippet import-ramda
  import * as R from 'ramda';

snippet import-lodash
  import _ from 'lodash';

snippet import-moment
  import moment from 'moment';

snippet import-react
  import React from 'react';

snippet import-prop-types
  import PropTypes from 'prop-types';

snippet import-styled-components
  import styled from 'styled-components';

# ==================== React ====================
snippet compnt-class
abbr class extends React.Component
alias class
  ${1:export\ }class ${2:className} extends React.Component {
    constructor (props) {
      super(props);
    }

    render () {
      return (
        ${0:TARGET}
      );
    }
  }

snippet compnt-func
abbr const Component = () => {};
alias const, export
  ${1:export\ }const ${2} = ({
    ${3:children}
  }) => {
    return (
      ${0:TARGET}
    );
  };

snippet compnt-single
alias <
abbr <Component />
  <${1:component-name}
    ${0:TARGET:props}
  />

snippet compnt-nested
alias <
abbr <Component />
  <${1:component-name}>
    ${0:TARGET}
  </$1>

snippet React.Fragment
alias <
abbr <React.Fragment/>
  <React.Fragment>
    ${0:TAGET}
  </React.Fragment>

snippet render-React
abbr render () { return ( <Component /> ) }
  render () {
    ${0:TARGET}
  }

snippet componentDidMount
  componentDidMount () {
    ${0:TARGET}
  }

snippet shouldComponentUpdate
  shouldComponentUpdate (nextProps, nextState) {
    ${0:TARGET}
  }

snippet componentDidUpdate
  componentDidUpdate (prevProps, prevState, snapshot) {
    ${0:TARGET}
  }

snippet getDerivedStateFromProps
  static getDerivedStateFromProps (nextProps, prevState) {
    ${0:TARGET}
  }

snippet commentout-jsx
options indent
  {/*
  ${0:TARGET}
  */}

snippet return-component
  return (
    ${0:TARGET}
  );

snippet why-did-you-update
  import { whyDidYouUpdate } from 'why-did-you-update';
  whyDidYouUpdate(React);

snippet import-react-test
  import React from 'react';
  import { shallow, mount } from 'enzyme';
  import toJson from 'enzyme-to-json';

snippet describe
  describe('${1:test-name}', () => {
    ${0:TARGET}
  });

snippet it
abbr it('should ...') {}
  it('${1:test-name}', () => {
    ${0:TARGET}
  });

snippet it-snapshot
  it('matches snapshot', () => {
    const wrapper = shallow(
      ${0:TARGET}
    );
    expect(toJson(wrapper)).toMatchSnapshot();
  });

# ==================== Redux ====================
snippet reducks-template
  /* -------------------- Constants -------------------- */
  ${0}


  /* -------------------- Actions -------------------- */


  /* -------------------- Initial state -------------------- */
  const initialState = {

  };


  /* -------------------- Reducers -------------------- */
  export default function (state = initialState, action) {
    switch (action.type) {

      default:
        return state;
    }
  };

# ==================== Extras ====================
snippet separator
abbr /* ----- this is ----- */
  /* -------------------- ${0:TARGET} -------------------- */

snippet separator-thick
abbr === name ===
  // ========================================
  // ${0:TARGET}
  // ========================================

snippet doc-comment
abbr /* @doc-comment */
  /**${0}

snippet performance-start
  var start = performance.now();

snippet performance-end
  var end = performance.now();
  console.log(end - start);
